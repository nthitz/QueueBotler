// Generated by CoffeeScript 1.3.3
(function() {
  var $, Bot, DEBUG, addToQueue, addToQueueIfNotInQueue, auth, bot, chatToSend, host, http, latestQueue, msgToSend, numberToEmoji, parsePM, pins, processQueueHTML, profiles, querystring, queueLineID, removeFromQueue, removeQueuedPerson, requestQueue, sendChat, sendChatMessage, sendQueueInChat;

  http = require('http');

  $ = require('jquery');

  querystring = require('querystring');

  Bot = require('ttapi');

  auth = require('./botAuth');

  profiles = require('./UserProfiles');

  DEBUG = true;

  host = 'www.sosimpull.com';

  latestQueue = null;

  queueLineID = 0;

  pins = {};

  requestQueue = function(callback) {
    var cb, queueOptions, req;
    console.log('requesting queue');
    queueOptions = {
      host: host,
      path: '/line.php'
    };
    cb = function(response) {
      var str;
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        return processQueueHTML(str, callback);
      });
    };
    req = http.request(queueOptions, cb);
    return req.end();
  };

  processQueueHTML = function(html, callback) {
    var $h, curQ, item, name, queueID, status, tds, time, tr, trs, _i, _len;
    console.log('queue html receieved');
    $h = $(html);
    trs = $h.find('tbody').find('tr');
    curQ = [];
    for (_i = 0, _len = trs.length; _i < _len; _i++) {
      tr = trs[_i];
      tds = $(tr).find('td');
      name = $(tds[1]).text();
      time = $(tds[2]).text();
      status = $(tds[6]).find('select').val();
      queueID = $(tds[6]).find('select').attr('id').substr(7);
      item = {
        name: name,
        time: time,
        status: status,
        queueID: queueID
      };
      curQ.push(item);
    }
    latestQueue = curQ;
    return callback(curQ);
  };

  sendQueueInChat = function(queue) {
    var index, lineNum, msgs, pMsg, person;
    console.log('sendq');
    console.log(queue);
    msgs = [];
    msgs.push('Current Queue from sosimpull.com/mashupfm-line/ :');
    lineNum = 0;
    for (index in queue) {
      person = queue[index];
      lineNum++;
      pMsg = numberToEmoji(lineNum);
      pMsg += ' ' + person.name + ' (' + person.time;
      if (person.status !== 'Here') {
        pMsg += ', ' + person.status;
      }
      pMsg += ')';
      msgs.push(pMsg);
    }
    if (DEBUG) {
      return console.log(msgs);
    } else {
      return sendChat(msgs);
    }
  };

  chatToSend = [];

  msgToSend = '';

  sendChat = function(msgs) {
    if (chatToSend.length !== 0) {
      console.log('pending chat messages, not implemented');
      return;
    }
    chatToSend = msgs;
    return sendChatMessage();
  };

  sendChatMessage = function() {
    if (chatToSend.length === 0) {
      return;
    }
    msgToSend = chatToSend.shift();
    return setTimeout(function() {
      console.log('chat: ' + msgToSend);
      return bot.speak(msgToSend, sendChatMessage);
    }, 50);
  };

  numberToEmoji = function(num) {
    switch (num) {
      case 1:
        return ":one:";
      case 2:
        return ":two:";
      case 3:
        return ":three:";
      case 4:
        return ":four:";
      case 5:
        return ":five:";
      case 6:
        return ":six:";
      case 7:
        return ":seven:";
      case 8:
        return ":eight:";
      case 9:
        return ":nine:";
      default:
        return num + ":";
    }
  };

  bot = new Bot(auth.AUTH, auth.USERID);

  profiles.init(bot);

  bot.on('ready', function(data) {
    return bot.roomRegister(auth.ROOMID);
  });

  addToQueueIfNotInQueue = function(queue, user) {
    var person, username, _i, _len;
    username = user.name;
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      person = queue[_i];
      if (person.name === username) {
        console.log('user already in queue, maybe some chat response here?');
        return false;
      }
    }
    return addToQueue(user);
  };

  addToQueue = function(user) {
    var addData, cb, pin, queueOptions, req, strPin;
    console.log('add to queue');
    pin = Math.floor(Math.random() * 1000);
    strPin = "" + pin;
    if (pin < 100) {
      strPin = Math.floor(Math.random() * 10) + strPin;
    }
    if (pin < 10) {
      strPin = Math.floor(Math.random() * 10) + strPin;
    }
    pins[user.name] = strPin;
    addData = querystring.stringify({
      whichLine: queueLineID,
      lineName: user.name,
      linePIN: strPin,
      Add: 'Add'
    });
    queueOptions = {
      host: host,
      path: '/lineProcess.php',
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': addData.length
      }
    };
    cb = function(response) {
      var str;
      response.setEncoding('utf8');
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        var msg;
        console.log('added to queue ? ');
        msg = "You've been added to the queue, your pin is " + strPin + ". Estimated position in line #" + (latestQueue.length + 1);
        return bot.pm(msg, user.userid);
      });
    };
    req = http.request(queueOptions, cb);
    console.log(addData);
    req.write(addData);
    return req.end();
  };

  removeFromQueue = function(queue, user) {
    var name, queuePerson, userID, _i, _len, _results;
    console.log(user);
    userID = user.userid;
    name = user.name;
    _results = [];
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      queuePerson = queue[_i];
      if (queuePerson.name === name) {
        removeQueuedPerson(queuePerson, user);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  removeQueuedPerson = function(queuePerson, user) {
    var cb, queueOptions;
    queueOptions = {
      host: host,
      path: '/lineDeleteProcess.php?lineID=' + queuePerson.queueID + '&linePIN=' + pins[user.name] + "&whichLine=" + queueLineID
    };
    cb = function(response) {
      var str;
      response.setEncoding('utf8');
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        var msg;
        console.log('removed from queue ? ');
        console.log(str);
        msg = "You've been removed from the queue";
        return bot.pm(msg, user.userid);
      });
    };
    return http.request(queueOptions, cb).end();
  };

  parsePM = function(pm, user) {
    if (pm.text === 'queuebot') {
      requestQueue(sendQueueInChat);
    }
    if (pm.text === 'add' || pm.text === 'a') {
      requestQueue(function(queue) {
        return addToQueueIfNotInQueue(queue, user);
      });
    }
    if (pm.text === 'rm' || pm.text === 'r' || pm.text === 'remove') {
      requestQueue(function(queue) {
        return removeFromQueue(queue, user);
      });
    }
    return console.log(pm);
  };

  /*
  bot.on 'speak', (data) ->
  	if data.text.toLowerCase().indexOf('queuebot') isnt -1
  		console.log 'requesting queue'
  		requestQueue(sendQueueInChat)
  */


  bot.on('pmmed', function(data) {
    return profiles.getProfile(data.senderid, function(profile) {
      return parsePM(data, profile);
    });
  });

}).call(this);
