// Generated by CoffeeScript 1.3.3
(function() {
  var $, ChatManager, DEBUG, PMManager, PinManager, TTAPI, addToQueue, addToQueueIfNotInQueue, adminIDs, bot, chatModeOnFor, checkIn, checkInIfInList, devMode, getQueueMessages, host, http, init, latestQueue, makeNameQueueSafe, numberToEmoji, parsePM, pmHelp, processQueueHTML, profiles, querystring, queueLineID, redis, redisClient, removeFromQueue, removeQueuedPerson, requestQueue, savePin, savePinInQueue, sendQueueInChat, sendQueueInChatIfVerified, sendQueueInPM, updateStatus, updateStatusIfInQueue, util;

  http = require('http');

  $ = require('jquery');

  querystring = require('querystring');

  TTAPI = require('ttapi');

  profiles = require('./UserProfiles');

  PMManager = require('./PMManager');

  ChatManager = require('./ChatManager');

  PinManager = require('./PinManager');

  util = require('util');

  redis = require('redis');

  DEBUG = false;

  host = 'www.sosimpull.com';

  latestQueue = null;

  queueLineID = 0;

  adminIDs = ["4f50f403590ca262030050e7"];

  devMode = false;

  bot = null;

  redisClient = null;

  chatModeOnFor = [];

  requestQueue = function(callback) {
    var cb, queueOptions, req;
    queueOptions = {
      host: host,
      path: '/line.php'
    };
    cb = function(response) {
      var str;
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        return processQueueHTML(str, callback);
      });
    };
    req = http.request(queueOptions, cb);
    return req.end();
  };

  processQueueHTML = function(html, callback) {
    var $h, curQ, item, name, queueID, status, tds, time, tr, trs, _i, _len;
    $h = $(html);
    trs = $h.find('tbody').find('tr');
    curQ = [];
    for (_i = 0, _len = trs.length; _i < _len; _i++) {
      tr = trs[_i];
      tds = $(tr).find('td');
      name = $(tds[1]).text();
      time = $(tds[2]).text();
      status = $(tds[6]).find('select').val();
      queueID = $(tds[6]).find('select').attr('id').substr(7);
      item = {
        name: name,
        time: time,
        status: status,
        queueID: queueID
      };
      curQ.push(item);
    }
    latestQueue = curQ;
    return callback(curQ);
  };

  getQueueMessages = function(queue) {
    var index, lineNum, msgs, pMsg, person;
    msgs = [];
    msgs.push('Current Queue from http://sosimpull.com/mashupfm-line/');
    lineNum = 0;
    if (queue.length !== 0) {
      for (index in queue) {
        person = queue[index];
        lineNum++;
        pMsg = numberToEmoji(lineNum) + ' ';
        pMsg += person.name.charAt(0) === '@' ? '' : '@';
        pMsg += person.name;
        pMsg += ' (' + person.time;
        if (person.status !== 'Here') {
          pMsg += ', ' + person.status;
        }
        pMsg += ')';
        msgs.push(pMsg);
      }
    } else {
      msgs.push("Empty!");
    }
    return msgs;
  };

  sendQueueInPM = function(queue, user) {
    var msgs;
    msgs = getQueueMessages(queue);
    return PMManager.queuePMs(msgs, user.userid);
  };

  sendQueueInChatIfVerified = function(user) {
    return bot.roomInfo(false, function(data) {
      var verified;
      verified = false;
      if (data.room.metadata.moderator_id.indexOf(user.userid) !== -1) {
        verified = true;
      }
      if (data.room.metadata.djs.indexOf(user.userid) !== -1) {
        verified = true;
      }
      if (adminIDs.indexOf(user.userid) !== -1) {
        verified = true;
      }
      if (verified) {
        return requestQueue(function(queue) {
          return sendQueueInChat(queue);
        });
      } else {
        return PMManager.queuePMs(["Sorry I can't let you do that."], user.userid);
      }
    });
  };

  sendQueueInChat = function(queue) {
    var msgs;
    msgs = getQueueMessages(queue);
    return ChatManager.sendChat(msgs);
  };

  numberToEmoji = function(num) {
    switch (num) {
      case 1:
        return ":one:";
      case 2:
        return ":two:";
      case 3:
        return ":three:";
      case 4:
        return ":four:";
      case 5:
        return ":five:";
      case 6:
        return ":six:";
      case 7:
        return ":seven:";
      case 8:
        return ":eight:";
      case 9:
        return ":nine:";
      default:
        return num + ":";
    }
  };

  makeNameQueueSafe = function(name) {
    return name.replace(/'/g, "");
  };

  addToQueueIfNotInQueue = function(queue, user) {
    var person, username, _i, _len;
    username = makeNameQueueSafe(user.name);
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      person = queue[_i];
      if (person.name === username) {
        PMManager.queuePMs(["You are already in the queue."], user.userid);
        return false;
      }
    }
    return addToQueue(user);
  };

  savePinInQueue = function(queue, pin, user) {
    var person, queueName, _i, _len, _results;
    queueName = makeNameQueueSafe(user.name);
    _results = [];
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      person = queue[_i];
      if (person.name === queueName) {
        savePin(person.queueID, pin, user.userid);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  savePin = function(lineID, pin, userid) {
    var pinO;
    pinO = {
      lineID: lineID,
      pin: pin
    };
    return PinManager.set(userid, pinO);
  };

  addToQueue = function(user) {
    var addData, cb, pin, queueName, queueOptions, req, strPin;
    pin = Math.floor(Math.random() * 1000);
    strPin = "" + pin;
    if (pin < 100) {
      strPin = Math.floor(Math.random() * 10) + strPin;
    }
    if (pin < 10) {
      strPin = Math.floor(Math.random() * 10) + strPin;
    }
    queueName = makeNameQueueSafe(user.name);
    addData = querystring.stringify({
      whichLine: queueLineID,
      lineName: queueName,
      linePIN: strPin,
      Add: 'Add'
    });
    queueOptions = {
      host: host,
      path: '/lineProcess.php',
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': addData.length
      }
    };
    cb = function(response) {
      var str;
      response.setEncoding('utf8');
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        var msg;
        requestQueue(function(queue) {
          return savePinInQueue(queue, strPin, user);
        });
        msg = "You've been added to the queue, your pin is " + strPin + ". Estimated position in line #" + (latestQueue.length + 1);
        return PMManager.queuePMs([msg], user.userid);
      });
    };
    req = http.request(queueOptions, cb);
    console.log(addData);
    req.write(addData);
    return req.end();
  };

  removeFromQueue = function(queue, user) {
    var name, queuePerson, userID, _i, _len;
    userID = user.userid;
    name = makeNameQueueSafe(user.name);
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      queuePerson = queue[_i];
      if (queuePerson.name === name) {
        removeQueuedPerson(queuePerson, user);
        return;
      }
    }
    return PMManager.queuePMs(['You are not in the queue. I think.'], user.userid);
  };

  removeQueuedPerson = function(queuePerson, user) {
    return PinManager.get(user.userid, function(error, pin) {
      var cb, queueOptions;
      if (pin === null) {
        PMManager.queuePMs(["Sorry, I don't know your PIN."], user.userid);
        return;
      }
      queueOptions = {
        host: host,
        path: '/lineDeleteProcess.php?lineID=' + queuePerson.queueID + '&linePIN=' + pin.pin + "&whichLine=" + queueLineID
      };
      console.log(queueOptions.path);
      cb = function(response) {
        var str;
        response.setEncoding('utf8');
        str = '';
        response.on('data', function(data) {
          return str += data;
        });
        return response.on('end', function() {
          var msg;
          msg = "You've been removed from the queue";
          PinManager.del(user.userid);
          return PMManager.queuePMs([msg], user.userid);
        });
      };
      return http.request(queueOptions, cb).end();
    });
  };

  updateStatusIfInQueue = function(queue, user, status) {
    var name, queuePerson, userID, _i, _len;
    userID = user.userID;
    name = makeNameQueueSafe(user.name);
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      queuePerson = queue[_i];
      if (queuePerson.name === name) {
        updateStatus(queuePerson, user, status);
        return;
      }
    }
    return PMManager.queuePMs(['You are not in the queue. I think.'], user.userid);
  };

  updateStatus = function(queuePerson, user, status) {
    var oldStatus;
    oldStatus = status.toLowerCase();
    if (oldStatus === 'bathroom') {
      oldStatus = 'restroom';
    }
    status = oldStatus.charAt(0).toUpperCase() + oldStatus.slice(1);
    return PinManager.get(user.userid, function(error, pin) {
      var cb, reqOpts;
      if (pin === null) {
        PMManager.queuePMs(['Sorry, I don\'t know your PIN.'], user.userid);
        return;
      }
      reqOpts = {
        host: host,
        path: '/lineCheckInProcess.php?lineID=' + queuePerson.queueID + '&linePIN=' + pin.pin + '&whichLine=' + queueLineID + '&lineStatus=' + status
      };
      console.log(reqOpts.path);
      cb = function(response) {
        var str;
        response.setEncoding('utf8');
        str = '';
        response.on('data', function(data) {
          return str += data;
        });
        return response.on('end', function() {
          var msg;
          msg = "Your status has been updated to: " + status;
          return PMManager.queuePMs([msg], user.userid);
        });
      };
      return http.request(reqOpts, cb).end();
    });
  };

  checkInIfInList = function(queue, user) {
    var name, queuePerson, userID, _i, _len;
    userID = user.userid;
    name = makeNameQueueSafe(user.name);
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      queuePerson = queue[_i];
      if (queuePerson.name === name) {
        checkIn(queuePerson, user);
        return;
      }
    }
    return PMManager.queuePMs(['You are not in the queue. I think.'], user.userid);
  };

  checkIn = function(queuePerson, user) {
    return PinManager.get(user.userid, function(error, pin) {
      var cb, queueOptions;
      if (pin === null) {
        PMManager.queuePMs(["Sorry, I don't know your PIN."], user.userid);
        return;
      }
      queueOptions = {
        host: host,
        path: '/lineCheckInProcess.php?lineID=' + queuePerson.queueID + '&linePIN=' + pin.pin + "&whichLine=" + queueLineID
      };
      console.log(queueOptions.path);
      cb = function(response) {
        var str;
        response.setEncoding('utf8');
        str = '';
        response.on('data', function(data) {
          return str += data;
        });
        return response.on('end', function() {
          var msg;
          msg = "You've been checked in";
          return PMManager.queuePMs([msg], user.userid);
        });
      };
      return http.request(queueOptions, cb).end();
    });
  };

  parsePM = function(pm, user) {
    var originalText;
    originalText = pm.text;
    pm.text = pm.text.toLowerCase().trim();
    if (devMode) {
      if (adminIDs.indexOf(user.userid) === -1) {
        PMManager.queuePMs(["I'm currently offline while @nthitz rewires my circuits. Please goto http://sosimpull.com/mashupfm-line/ to join the queue!"], user.userid);
        return;
      }
    }
    if (pm.text === '=chatmodeoff') {
      delete chatModeOnFor[user.userid];
      PMManager.queuePMs([":("], user.userid);
    } else if (typeof chatModeOnFor[user.userid] !== 'undefined') {
      ChatManager.sendChat([originalText]);
    } else if (pm.text === 'q chat' || pm.text === 'queue chat') {
      sendQueueInChatIfVerified(user);
    } else if (pm.text === 'add' || pm.text === 'a') {
      requestQueue(function(queue) {
        return addToQueueIfNotInQueue(queue, user);
      });
    } else if (pm.text === 'rm' || pm.text === 'r' || pm.text === 'remove') {
      requestQueue(function(queue) {
        return removeFromQueue(queue, user);
      });
    } else if (pm.text === 'c' || pm.text === 'ci' || pm.text === 'checkin' || pm.text === 'check in') {
      requestQueue(function(queue) {
        return checkInIfInList(queue, user);
      });
    } else if (pm.text === 'q' || pm.text === 'queue') {
      requestQueue(function(queue) {
        return sendQueueInPM(queue, user);
      });
    } else if (pm.text === 'lunch' || pm.text === 'meeting' || pm.text === 'restroom' || pm.text === 'bathroom' || pm.text === 'here') {
      requestQueue(function(queue) {
        return updateStatusIfInQueue(queue, user, pm.text);
      });
    } else if (pm.text === '=chatmodeon') {
      if (adminIDs.indexOf(user.userid !== -1)) {
        chatModeOnFor[user.userid] = true;
        PMManager.queuePMs([":)"], user.userid);
      }
    } else if (pm.text === 'help') {
      pmHelp("help", user.userid);
    } else if (pm.text === 'about') {
      pmHelp('about', user.userid);
    } else if (pm.text === 'status' || pm.text === 'help status') {
      pmHelp('status', user.userid);
    } else if (pm.text === 'help add') {
      pmHelp("add", user.userid);
    } else if (pm.text === 'help remove') {
      pmHelp('remove', user.userid);
    } else if (pm.text === 'help checkin') {
      pmHelp('checkin', user.userid);
    } else if (pm.text === 'help queue') {
      pmHelp('queue', user.userid);
    } else if (pm.text === 'help about') {
      pmHelp('about', user.userid);
    } else {
      PMManager.queuePMs(["Sorry I don't know what you mean. PM me \"help\" for info."], user.userid);
    }
    return console.log("pm: " + user.name + ": " + pm.text);
  };

  pmHelp = function(msg, userid) {
    var msgs;
    msgs = [];
    if (msg === "help") {
      msgs = ["Hello, I'm QueueBotler for the mashup.fm line @ http://sosimpull.com/mashupfm-line/. Here are some commands: add, remove, checkin, queue, about, status. Reply \"help [command]\" for more info on any command (I only work through PMs!)"];
    } else if (msg === 'add') {
      msgs = ["add: adds you to the sosimpull.com queue", "aliases: add, a"];
    } else if (msg === "remove") {
      msgs = ["remove: removes you from the sosimpull.com queue", "only works if you added with the bot", "aliases: remove, rm, r"];
    } else if (msg === "checkin") {
      msgs = ["checkin: checks you in to the sosimpull.com queue", "only works if you added with the bot", "aliases: checkin, check in, ci, c"];
    } else if (msg === "queue") {
      msgs = ["queue: pms you the current queue", "aliases: queue, q", "if you are a mod or on deck you can append 'chat' to send the queue to the chat ex: \"q chat\""];
    } else if (msg === 'about') {
      msgs = ["Real line here: http://sosimpull.com/mashupfm-line/", "Facebook Group http://www.facebook.com/groups/mashupfm/", "Rules http://bit.ly/TLBLyC", "Created by @nthitz - nthtiz AT gmail DOT com"];
    } else if (msg === 'status') {
      msgs = ["To change your status, pm me one of the following: lunch, meeting, restroom or here"];
    }
    return PMManager.queuePMs(msgs, userid);
  };

  init = function() {
    var rtg;
    if (typeof process.env.AUTH === 'undefined') {
      console.log('setup bot environmnet vars first');
      process.exit();
    }
    if (typeof process.env.REDISURL === 'undefined') {
      console.log('need redis url');
      process.exit();
    }
    rtg = require("url").parse(process.env.REDISURL);
    redisClient = redis.createClient(rtg.port, rtg.hostname);
    redisClient.auth(rtg.auth.split(":")[1], redis.print);
    PinManager.init(redisClient);
    bot = new TTAPI(process.env.AUTH, process.env.USERID);
    profiles.init(bot);
    PMManager.setBot(bot);
    ChatManager.setBot(bot);
    bot.on('ready', function(data) {
      return bot.roomRegister(process.env.ROOMID);
    });
    bot.on('speak', function(data) {
      var lower;
      lower = data.text.toLowerCase().trim();
      if (lower.match(/^\/?\+?q(ueue)?\+?$/)) {
        return pmHelp("help", data.userid);
      }
    });
    return bot.on('pmmed', function(data) {
      return profiles.getProfile(data.senderid, function(profile) {
        return parsePM(data, profile);
      });
    });
  };

  init();

}).call(this);
