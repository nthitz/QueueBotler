// Generated by CoffeeScript 1.3.3
(function() {
  var $, Bot, ChatManager, DEBUG, PMManager, addToQueue, addToQueueIfNotInQueue, bot, checkIn, checkInIfInList, getQueueMessages, host, http, latestQueue, numberToEmoji, parsePM, pins, pmHelp, processQueueHTML, profiles, querystring, queueLineID, removeFromQueue, removeQueuedPerson, requestQueue, savePin, savePinInQueue, sendQueueInChat, sendQueueInChatIfVerified, sendQueueInPM;

  http = require('http');

  $ = require('jquery');

  querystring = require('querystring');

  Bot = require('ttapi');

  profiles = require('./UserProfiles');

  PMManager = require('./PMManager');

  ChatManager = require('./ChatManager');

  DEBUG = false;

  host = 'www.sosimpull.com';

  latestQueue = null;

  queueLineID = 0;

  pins = {};

  requestQueue = function(callback) {
    var cb, queueOptions, req;
    console.log('requesting queue');
    queueOptions = {
      host: host,
      path: '/line.php'
    };
    cb = function(response) {
      var str;
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        return processQueueHTML(str, callback);
      });
    };
    req = http.request(queueOptions, cb);
    return req.end();
  };

  processQueueHTML = function(html, callback) {
    var $h, curQ, item, name, queueID, status, tds, time, tr, trs, _i, _len;
    console.log('queue html receieved');
    $h = $(html);
    trs = $h.find('tbody').find('tr');
    curQ = [];
    for (_i = 0, _len = trs.length; _i < _len; _i++) {
      tr = trs[_i];
      tds = $(tr).find('td');
      name = $(tds[1]).text();
      time = $(tds[2]).text();
      status = $(tds[6]).find('select').val();
      queueID = $(tds[6]).find('select').attr('id').substr(7);
      item = {
        name: name,
        time: time,
        status: status,
        queueID: queueID
      };
      curQ.push(item);
    }
    latestQueue = curQ;
    return callback(curQ);
  };

  getQueueMessages = function(queue) {
    var index, lineNum, msgs, pMsg, person;
    msgs = [];
    msgs.push('Current Queue from sosimpull.com/mashupfm-line/ :');
    lineNum = 0;
    if (queue.length !== 0) {
      for (index in queue) {
        person = queue[index];
        lineNum++;
        pMsg = numberToEmoji(lineNum);
        pMsg += ' ' + person.name + ' (' + person.time;
        if (person.status !== 'Here') {
          pMsg += ', ' + person.status;
        }
        pMsg += ')';
        msgs.push(pMsg);
      }
    } else {
      msgs.push("Empty!");
    }
    return msgs;
  };

  sendQueueInPM = function(queue, user) {
    var msgs;
    console.log('send queue in pm');
    msgs = getQueueMessages(queue);
    return PMManager.queuePMs(msgs, user.userid);
  };

  sendQueueInChatIfVerified = function(user) {
    return bot.roomInfo(false, function(data) {
      var verified;
      verified = false;
      if (data.room.metadata.moderator_id.indexOf(user.userid) !== -1) {
        verified = true;
      }
      if (data.room.metadata.djs.indexOf(user.userid) !== -1) {
        verified = true;
      }
      if (user.userid === '4f50f403590ca262030050e7') {
        verified = true;
      }
      if (verified) {
        return requestQueue(function(queue) {
          return sendQueueInChat(queue);
        });
      } else {
        return PMManager.queuePMs(["Sorry I can't let you do that."], user.userid);
      }
    });
  };

  sendQueueInChat = function(queue) {
    var msgs;
    msgs = getQueueMessages(queue);
    return ChatManager.sendChat(msgs);
  };

  numberToEmoji = function(num) {
    switch (num) {
      case 1:
        return ":one:";
      case 2:
        return ":two:";
      case 3:
        return ":three:";
      case 4:
        return ":four:";
      case 5:
        return ":five:";
      case 6:
        return ":six:";
      case 7:
        return ":seven:";
      case 8:
        return ":eight:";
      case 9:
        return ":nine:";
      default:
        return num + ":";
    }
  };

  if (typeof process.env.AUTH === 'undefined') {
    console.log('setup bot environmnet vars first');
    process.exit();
  }

  bot = new Bot(process.env.AUTH, process.env.USERID);

  profiles.init(bot);

  PMManager.setBot(bot);

  ChatManager.setBot(bot);

  bot.on('ready', function(data) {
    return bot.roomRegister(process.env.ROOMID);
  });

  addToQueueIfNotInQueue = function(queue, user) {
    var person, username, _i, _len;
    username = user.name;
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      person = queue[_i];
      if (person.name === username) {
        console.log('user already in queue, maybe some chat response here?');
        PMManager.queuePMs(["You are already in the queue."], user.userid);
        return false;
      }
    }
    return addToQueue(user);
  };

  savePinInQueue = function(queue, pin, queueName) {
    var person, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      person = queue[_i];
      if (person.name === queueName) {
        savePin(person.queueID, pin, queueName);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  savePin = function(lineID, pin, queueName) {
    return pins[queueName] = {
      lineID: lineID,
      pin: pin
    };
  };

  addToQueue = function(user) {
    var addData, cb, pin, queueOptions, req, strPin;
    console.log('add to queue');
    pin = Math.floor(Math.random() * 1000);
    strPin = "" + pin;
    if (pin < 100) {
      strPin = Math.floor(Math.random() * 10) + strPin;
    }
    if (pin < 10) {
      strPin = Math.floor(Math.random() * 10) + strPin;
    }
    addData = querystring.stringify({
      whichLine: queueLineID,
      lineName: user.name,
      linePIN: strPin,
      Add: 'Add'
    });
    queueOptions = {
      host: host,
      path: '/lineProcess.php',
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': addData.length
      }
    };
    cb = function(response) {
      var str;
      response.setEncoding('utf8');
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        var msg;
        console.log('added to queue ? ');
        requestQueue(function(queue) {
          return savePinInQueue(queue, strPin, user.name);
        });
        msg = "You've been added to the queue, your pin is " + strPin + ". Estimated position in line #" + (latestQueue.length + 1);
        return PMManager.queuePMs([msg], user.userid);
      });
    };
    req = http.request(queueOptions, cb);
    console.log(addData);
    req.write(addData);
    return req.end();
  };

  removeFromQueue = function(queue, user) {
    var name, queuePerson, userID, _i, _len;
    userID = user.userid;
    name = user.name;
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      queuePerson = queue[_i];
      if (queuePerson.name === name) {
        removeQueuedPerson(queuePerson, user);
        return;
      }
    }
    return PMManager.queuePMs(['You are not in the queue. I think.'], user.userid);
  };

  removeQueuedPerson = function(queuePerson, user) {
    var cb, queueOptions;
    if (typeof pins[user.name] === 'undefined') {
      PMManager.queuePMs(["Sorry, I don't know your PIN."], user.userid);
      return;
    }
    queueOptions = {
      host: host,
      path: '/lineDeleteProcess.php?lineID=' + queuePerson.queueID + '&linePIN=' + pins[user.name]['pin'] + "&whichLine=" + queueLineID
    };
    cb = function(response) {
      var str;
      response.setEncoding('utf8');
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        var msg;
        console.log('removed from queue ? ');
        console.log(str);
        msg = "You've been removed from the queue";
        delete pins[user.name];
        return PMManager.queuePMs([msg], user.userid);
      });
    };
    return http.request(queueOptions, cb).end();
  };

  checkInIfInList = function(queue, user) {
    var name, queuePerson, userID, _i, _len;
    userID = user.userid;
    name = user.name;
    console.log(queue);
    for (_i = 0, _len = queue.length; _i < _len; _i++) {
      queuePerson = queue[_i];
      if (queuePerson.name === name) {
        checkIn(queuePerson, user);
        return;
      }
    }
    return PMManager.queuePMs(['You are not in the queue. I think.'], user.userid);
  };

  checkIn = function(queuePerson, user) {
    var cb, queueOptions;
    if (typeof pins[user.name] === 'undefined') {
      PMManager.queuePMs(["Sorry, I don't know your PIN."], user.userid);
      return;
    }
    queueOptions = {
      host: host,
      path: '/lineCheckInProcess.php?lineID=' + queuePerson.queueID + '&linePIN=' + pins[user.name]['pin'] + "&whichLine=" + queueLineID
    };
    console.log(queueOptions);
    cb = function(response) {
      var str;
      response.setEncoding('utf8');
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        var msg;
        console.log('checked in ');
        console.log(str);
        msg = "You've been checked in";
        return PMManager.queuePMs([msg], user.userid);
      });
    };
    return http.request(queueOptions, cb).end();
  };

  parsePM = function(pm, user) {
    pm.text = pm.text.toLowerCase().trim();
    if (pm.text === 'q chat' || pm.text === 'queue chat') {
      sendQueueInChatIfVerified(user);
    } else if (pm.text === 'add' || pm.text === 'a') {
      requestQueue(function(queue) {
        return addToQueueIfNotInQueue(queue, user);
      });
    } else if (pm.text === 'rm' || pm.text === 'r' || pm.text === 'remove') {
      requestQueue(function(queue) {
        return removeFromQueue(queue, user);
      });
    } else if (pm.text === 'c' || pm.text === 'ci' || pm.text === 'checkin' || pm.text === 'check in') {
      requestQueue(function(queue) {
        return checkInIfInList(queue, user);
      });
    } else if (pm.text === 'q' || pm.text === 'queue') {
      requestQueue(function(queue) {
        return sendQueueInPM(queue, user);
      });
    } else if (pm.text === 'help') {
      pmHelp("help", user.userid);
    } else if (pm.text === 'help add') {
      pmHelp("add", user.userid);
    } else if (pm.text === 'help remove') {
      pmHelp('remove', user.userid);
    } else if (pm.text === 'help checkin') {
      pmHelp('checkin', user.userid);
    } else if (pm.text === 'help queue') {
      pmHelp('queue', user.userid);
    }
    return console.log(pm);
  };

  pmHelp = function(msg, userid) {
    var msgs;
    msgs = [];
    if (msg === "help") {
      msgs = ["Hello, I'm QueueBotler. Here are some commands: add, remove, checkin, queue. Reply \"help [command]\" for more info on any command (I only work through PMs!)"];
    } else if (msg === 'add') {
      msgs = ["add: adds you to the sosimpull.com queue", "aliases: add, a"];
    } else if (msg === "remove") {
      msgs = ["remove: removes you from the sosimpull.com queue", "only works if you added with the bot", "aliases: remove, rm, r"];
    } else if (msg === "checkin") {
      msgs = ["checkin: checks you in to the sosimpull.com queue", "only works if you added with the bot", "aliases: checkin, check in, ci, c"];
    } else if (msg === "queue") {
      msgs = ["queue: pms you the current queue", "aliases: queue, q", "if you are a mod or on deck you can append 'chat' to send the queue to the chat ex: \"q chat\""];
    }
    return PMManager.queuePMs(msgs, userid);
  };

  bot.on('speak', function(data) {
    var lower;
    lower = data.text.toLowerCase().trim();
    if (lower.match(/^\/?q(ueue)?\+?$/)) {
      return pmHelp("help", data.userid);
    }
  });

  bot.on('pmmed', function(data) {
    return profiles.getProfile(data.senderid, function(profile) {
      return parsePM(data, profile);
    });
  });

}).call(this);
