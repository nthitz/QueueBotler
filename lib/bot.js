// Generated by CoffeeScript 1.3.3
(function() {
  var $, Bot, auth, bot, chatToSend, http, msgToSend, numberToEmoji, processQueueHTML, requestQueue, sendChat, sendChatMessage, sendQueueInChat;

  http = require('http');

  $ = require('jquery');

  Bot = require('ttapi');

  auth = require('./botAuth');

  console.log(auth);

  requestQueue = function(callback) {
    var cb, queueOptions, req;
    console.log('requesting queue');
    queueOptions = {
      host: 'www.sosimpull.com',
      path: '/line.php'
    };
    cb = function(response) {
      var str;
      str = '';
      response.on('data', function(data) {
        return str += data;
      });
      return response.on('end', function() {
        return processQueueHTML(str, callback);
      });
    };
    req = http.request(queueOptions, cb);
    return req.end();
  };

  processQueueHTML = function(html, callback) {
    var $h, curQ, item, name, status, tds, time, tr, trs, _i, _len;
    console.log('queue html receieved');
    $h = $(html);
    trs = $h.find('tbody').find('tr');
    curQ = [];
    for (_i = 0, _len = trs.length; _i < _len; _i++) {
      tr = trs[_i];
      tds = $(tr).find('td');
      name = $(tds[1]).text();
      time = $(tds[2]).text();
      status = $(tds[6]).find('select').val();
      item = {
        name: name,
        time: time,
        status: status
      };
      curQ.push(item);
    }
    return callback(curQ);
  };

  sendQueueInChat = function(queue) {
    var index, lineNum, msgs, pMsg, person;
    console.log('sendq');
    console.log(queue);
    msgs = [];
    msgs.push('Current Queue from sosimpull.com/mashupfm-line/ :');
    lineNum = 0;
    for (index in queue) {
      person = queue[index];
      if (person.status !== 'Here') {
        continue;
      }
      lineNum++;
      pMsg = numberToEmoji(lineNum);
      pMsg += ' ' + person.name;
      msgs.push(pMsg);
    }
    return sendChat(msgs);
  };

  chatToSend = [];

  msgToSend = '';

  sendChat = function(msgs) {
    if (chatToSend.length !== 0) {
      console.log('pending chat messages, not implemented');
      return;
    }
    chatToSend = msgs;
    return sendChatMessage();
  };

  sendChatMessage = function() {
    if (chatToSend.length === 0) {
      return;
    }
    msgToSend = chatToSend.shift();
    return setTimeout(function() {
      console.log('chat: ' + msgToSend);
      return bot.speak(msgToSend, sendChatMessage);
    }, 50);
  };

  numberToEmoji = function(num) {
    switch (num) {
      case 1:
        return ":one:";
      case 2:
        return ":two:";
      case 3:
        return ":three:";
      case 4:
        return ":four:";
      case 5:
        return ":five:";
      case 6:
        return ":six:";
      case 7:
        return ":seven:";
      case 8:
        return ":eight:";
      case 9:
        return ":nine:";
      default:
        return num + ":";
    }
  };

  bot = new Bot(auth.AUTH, auth.USERID);

  bot.on('ready', function(data) {
    return bot.roomRegister(auth.ROOMID);
  });

  bot.on('speak', function(data) {
    if (data.text.toLowerCase().indexOf('queuebot') !== -1) {
      console.log('requesting queue');
      return requestQueue(sendQueueInChat);
    }
  });

  bot.on('pmmed', function(data) {
    return requestQueue(sendQueueInChat);
  });

}).call(this);
